stages:
  - test
  - build
  - deploy
  - verify
  - rollback

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/api"
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  # default to prod; can be overridden by a manual pipeline variable
  DEPLOY_ENV: "prod"
  INVENTORY: "inventory/$DEPLOY_ENV/hosts.ini"
  # Make Ansible output more readable and fail fast
  ANSIBLE_STDOUT_CALLBACK: unixy
  ANSIBLE_HOST_KEY_CHECKING: "False"

# Common: auth to registry & SSH setup for Ansible
.before_ansible: &before_ansible
  before_script:
    - set -euo pipefail
    - apt-get update -y && apt-get install -y python3-venv ssh-agent rsync curl
    - python3 -m venv .venv && . .venv/bin/activate && pip install --upgrade pip wheel
    - pip install "ansible==9.*"
    # SSH key for Ansible
    - eval "$(ssh-agent -s)"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo -e "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config
    # Optional: vault password file
    - 'if [ -n "${ANSIBLE_VAULT_PASSWORD:-}" ]; then echo "$ANSIBLE_VAULT_PASSWORD" > .vaultpass; fi'

# ---------- TEST ----------
lint_and_test:
  stage: test
  image: docker:24
  services: [ "docker:24-dind" ]
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - set -euo pipefail
    # Placeholder: replace with your appâ€™s tests
    - echo "Running unit tests..." && sleep 1
    - echo "OK" | tee junit.xml
  artifacts:
    reports:
      junit: junit.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH'

# ---------- BUILD ----------
build_image:
  stage: build
  image: docker:24
  services: [ "docker:24-dind" ]
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - set -euo pipefail
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" -t "$IMAGE_NAME:latest" .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"
    - docker push "$IMAGE_NAME:latest"
  needs: ["lint_and_test"]
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'

# ---------- DEPLOY (Blue/Green) ----------
deploy_blue_green:
  stage: deploy
  image: debian:stable
  needs: ["build_image"]
  environment:
    name: $DEPLOY_ENV
    url: https://$LB_PUBLIC_DNS
  <<: *before_ansible
  script:
    - set -euo pipefail
    - . .venv/bin/activate
    # Drain A from LB
    - ansible-playbook -i "$INVENTORY" playbooks/lb_drain.yml --extra-vars "target=api-a" -vv 2>&1 | tee ansible-deploy-a.log
    # Deploy to A (idempotent or container pull)
    - ansible-playbook -i "$INVENTORY" playbooks/deploy.yml -e "image_tag=$IMAGE_TAG" --limit api-a -vv 2>&1 | tee -a ansible-deploy-a.log
    # Verify via LB health check
    - 'curl -sk --fail "https://$LB_PUBLIC_DNS/healthz"'
    # Enable A
    - ansible-playbook -i "$INVENTORY" playbooks/lb_enable.yml --extra-vars "target=api-a" -vv 2>&1 | tee -a ansible-deploy-a.log

    # Drain B, deploy, verify, enable
    - ansible-playbook -i "$INVENTORY" playbooks/lb_drain.yml --extra-vars "target=api-b" -vv 2>&1 | tee ansible-deploy-b.log
    - ansible-playbook -i "$INVENTORY" playbooks/deploy.yml -e "image_tag=$IMAGE_TAG" --limit api-b -vv 2>&1 | tee -a ansible-deploy-b.log
    - 'curl -sk --fail "https://$LB_PUBLIC_DNS/healthz"'
    - ansible-playbook -i "$INVENTORY" playbooks/lb_enable.yml --extra-vars "target=api-b" -vv 2>&1 | tee -a ansible-deploy-b.log
  artifacts:
    when: always
    paths:
      - ansible-deploy-a.log
      - ansible-deploy-b.log
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'

# ---------- VERIFY ----------
post_deploy_verify:
  stage: verify
  image: curlimages/curl:8.8.0
  needs: ["deploy_blue_green"]
  script:
    - 'curl -sk --fail "https://${LB_PUBLIC_DNS}/healthz"'
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'

# ---------- ROLLBACK on failure ----------
auto_rollback:
  stage: rollback
  image: debian:stable
  needs: ["deploy_blue_green"]
  when: on_failure
  allow_failure: false
  <<: *before_ansible
  script:
    - set -euo pipefail
    - . .venv/bin/activate
    - ansible-playbook -i "$INVENTORY" playbooks/rollback.yml -vv 2>&1 | tee ansible-rollback.log
  artifacts:
    when: always
    paths:
      - ansible-rollback.log
